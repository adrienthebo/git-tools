#!/usr/bin/env ruby
#
# See if branches have been merged into an integration branch
#
# == Requirements
#
# If you don't hate unicorns and like pretty tables, install the terminal-table
# and colorize gems.
#
# == Example:
#
#    > git-merged -a                                                                                                                                                            Tue 24 18:52
#    +----------------------------+------------+
#    | Branch                     | Status     |
#    +----------------------------+------------+
#    | origin/master              | merged     |
#    | origin/mysqlulz            | NOT merged |
#    | emrepoe                    | merged     |
#    | master                     | merged     |
#    | mysqlulz                   | NOT merged |
#    +----------------------------+------------+

require 'optparse'


# Given a symbolic reference and a branch, returns whether the symbolic
# reference has been merged into that branch
def merged?(symbolic, branch)
  sha1 = %x{git log -1 --pretty="format:%h" #{symbolic}}
  contains = %x{git branch --contains #{sha1} | grep #{branch}}
  not contains.empty?
end

def remote_branches
  output = %x{git branch -r}
  branches = output.split(/\n/)
  branches.map! {|line| line.scan(/\S+/).first}
  branches.delete_if {|branch| branch.match %r[/HEAD$]}

  branches
end

def local_branches
  output = %x{git branch}
  branches = output.split(/\n/)
  branches.map! {|line| line.sub(/\*/, '').strip}

  branches
end

def current_branch
  output = %x{git branch}
  branches = output.split(/\n/)
  branch = branches.find {|br| br.match /\*/ }
  branch.sub!(/\*/, '')
  branch.strip!

  branch
end

# Try to generate a rainbow-riffic table, and fall back to a sad table.
#
# Ben hates rainbows. I bet he hates unicorns as well.
#
# @param [Array<Array<String>>] table An array of branch pairs, with the name and status
# @param [String] integration_branch The name of the branch that contains (or doesn't) the checked branches.
#
# @return [String] The table, as a string.
def print_table(table, integration_branch)
  pretty_table(table, integration_branch)
rescue LoadError => e
  plain_table(table, integration_branch)
end

# Generate a lovely colorized table with happiness and joy.
#
# @param [Array<Array<String>>] table An array of branch pairs, with the name and status
# @param [String] integration_branch The name of the branch that contains (or doesn't) the checked branches.
#
# @return [String] The table, as a string.
def pretty_table(table, integration_branch)
  require 'rubygems'
  require 'colorize'
  require 'terminal-table'

  colorized_table = table.map do |branch, status|

    if status == :merged
      color = :green
      msg   = 'merged'.colorize(color)
    else
      color = :red
      msg   = 'NOT merged'.colorize(color)
    end

    [branch.dup.colorize(color), msg]
  end

  Terminal::Table.new :headings => ["Branch", "Status (against #{integration_branch})"], :rows => colorized_table
end

# Generate a plain table white whitespace padding
#
# @param [Array<Array<String>>] table An array of branch pairs, with the name and status
# @param [String] integration_branch The name of the branch that contains (or doesn't) the checked branches.
#
# @return [String] The table, as a string.
def plain_table(table, integration_branch)

  left_spaces = table.map {|pair| pair[0].size}.max + 1

  pretty_table = table.inject("") do |str, (branch, status)|
    msg = (status == :merged ? 'merged' : 'NOT merged')
    padding = left_spaces - branch.size
    str << "#{branch}#{' ' * padding}#{msg}\n"

    str
  end

  pretty_table = "Branch#{' ' * (left_spaces - 5)}Status (against #{integration_branch})\n\n#{pretty_table}"

  pretty_table
end

check_branches = []
integration_branch = nil
options = {:color => true}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename $0} [options]"

  opts.on("--branch=val", 'The branch to check for merges') do |param|
    raise ArgumentError, 'Option "--branch" can only be specified once!' if integration_branch
    integration_branch = param
  end

  opts.on('-r', '--remote', 'Check all remote branches') do
    options[:remote] = true
  end

  opts.on('-l', '--local', 'Check all local branches') do
    options[:local] = true
  end

  opts.on('-a', '--all', 'Check every branch ever') do
    options[:remote] = true
    options[:local] = true
  end

  opts.on('-c', '--[no-]color', 'Enable color (enabled by default)') do |color|
    options[:color] = color
  end

  opts.on_tail("-h", "--help", "Display this help") do
    puts opts
    exit 0
  end
end

begin
  parser.parse!
rescue => e
  $stderr.puts e
  $stderr.puts parser
  exit 1
end

if integration_branch.nil? or integration_branch.empty?
  integration_branch = 'master'
end

check_branches += remote_branches if options[:remote]
check_branches += local_branches if options[:local]

if check_branches.empty?
  if ARGV.empty?
    check_branches << current_branch
  else
    check_branches += ARGV
  end
end

# Generate a 2D array of branch names and their merge status
rows = check_branches.map do |branch|

  if merged? branch, integration_branch
    [branch, :merged]
  else
    [branch, :unmerged]
  end
end

if options[:color]
  tbl = print_table(rows, integration_branch)
else
  tbl = plain_table(rows, integration_branch)
end

puts tbl
