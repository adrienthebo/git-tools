#!/usr/bin/env ruby
#
# Given a number of branches, checks if they've been merged into a set of branches

def merged?(symbolic, branch)
  sha1 = %x{git log -1 --pretty="format:%h" #{symbolic}}

  contains = %x{git branch --contains #{sha1} | grep #{branch}}

  not contains.empty?
end

require 'optparse'

options = {:branches => []}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] FILE [FILE...]"

  opts.on("--branch=val", 'A branch to filter') do |param|
    options[:branches] << param
  end

  opts.on_tail("-h", "--help", "Display this help") do
    puts opts
    exit 0
  end
end

begin
  parser.parse!
rescue => e
  $stderr.puts e
  $stderr.puts parser
  exit 1
end

if ARGV.length < 1
  $stderr.puts parser
  exit 1
end

if options[:branches].empty?
  options[:branches] << 'master'
end


test_branches = ARGV

options[:branches].each do |branch|
  test_branches.each do |test_branch|
    puts "Branch #{test_branch} is" + (merged?(test_branch, branch) ? "" : " NOT") + " merged into #{branch}"
  end
end
