#!/usr/bin/env ruby
#
# Erases any number of files from the entirety of a project's history

require 'optparse'

options = {:branches => []}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] FILE [FILE...]"

  opts.on("--branch=val", 'A branch to filter') do |param|
    options[:branches] << param
  end

  opts.on('-v', '--verbose', 'Debug') do
    options[:verbose] = true
  end

  opts.on_tail("-h", "--help", "Display this help") do
    puts opts
    exit 0
  end
end

begin
  parser.parse!
rescue => e
  $stderr.puts e
  $stderr.puts parser
  exit 1
end

if ARGV.length < 1
  $stderr.puts parser
  exit 1
end

rm_cmd = %{echo; git rm -r --cached --ignore-unmatch #{ARGV.join(' ')}}
cmd = %{git filter-branch --prune-empty --index-filter "#{rm_cmd} || true" -- #{options[:branches].join(' ')}}

puts "Executing #{rm_cmd.inspect} for each commit" if options[:verbose]

system cmd

if File.exist? '.git/refs/original'
  puts %{Backing up .git/refs/original to .git/refs/original-#{Time.now.strftime('%s')}}
  %x{mv .git/refs/original .git/refs/original-#{Time.now.strftime('%s')}}
else
  puts '.git/refs/original does not exist, not performing backup.'
end
